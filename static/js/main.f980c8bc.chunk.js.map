{"version":3,"sources":["logo.svg","App.js","index.js"],"names":["K_PLACE","K_DATE_FORMAT","K_PHONE","O_TICKET_NUMBER","O_NUMBER_PLACE","O_TARGET_DAY_COMPLETED","O_MANUFACTURE","listErrorOther","App","props","mergeCsv","a","datas1","state","data1","datas1Error","data1Error","datas2","data2","fieldsName","nameChanged","categoryFieldName","getCategoryFieldName","inoculationPlace","csvContent","forEach","data","key","has","changeData","get","K_STATUS","_","isEmpty","K_RESERVATION_DATE","stringDate","moment","Date","format","K_TARGET_DAY_COMPLETED","push","checkData","console","log","csv","Papa","unparse","length","headerIndex","indexOf","headerString","substring","headers","split","newHeaders","header","includes","index","findIndex","o","replace","newHeadersString","join","input1Ref","current","value","input2Ref","setState","Map","isLoading","showResults","isFinishMerge","resultData","errorFound","downloadToFile","content","filename","contentType","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","revokeObjectURL","fileName","errorfileName","React","createRef","handleInputFile","bind","handleMergeData","exportErrorFile","handleDownLoadFileMerged","resetState","fileNameExt","substr","lastIndexOf","hasOwnProperty","message","event","alert","target","this","isAvailableDownLoad","pop","checkFileCSV","parse","files","delimiter","skipEmptyLines","trimHeaders","complete","results","firstData","first","undefined","errors","handleInvalidData","checkFileType","handleDataFile1","handleDataFile2","transform","field","validDataString","transformHeader","RegExp","datas","dataDraff","i","K_NUMBER_PLACE","set","size","handleProcessData","completion","setTimeout","className","Navbar","bg","expand","Brand","Toggle","aria-controls","Form","Group","controlId","File","id","label","ref","onChange","Button","variant","onClick","disabled","Spinner","animation","role","aria-live","aria-atomic","style","position","minHeight","top","right","Toast","onClose","show","delay","autohide","Header","Body","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f980c8bc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Button, Navbar, Nav, NavDropdown, Spinner, Toast, Alert } from 'react-bootstrap';\nimport React, { useState, useEffect, StyleSheet, Text } from 'react';\nimport './App.css';\nimport Papa from 'papaparse'\nimport Parser from 'json2csv'\nimport _, { cloneDeep } from 'lodash'\nimport moment from 'moment'\n\nconst LIST_STATUS_MERGED = [\"対応済\"];\nconst K_STATUS = \"状態\";\nconst K_TICKET_NUMBER = \"接種券番号\";\nconst K_NUMBER_PLACE = \"接種回数\";\nconst K_STATUS_COMPLETED = \"完了\";\nconst K_TARGET_DAY_COMPLETED = \"接種実施日\";\nconst K_MANUFACTURE = \"接種ワクチンのメーカー\";\nconst K_PLACE = \"接種場所\";\nconst K_ID = \"パーティションキー\";\nconst K_DATE_FORMAT = 'YYYY-MM-DD';\nconst K_UPDATE_DATE_FORMAT = 'YYYY-MM-DD hh:mm:ss';\nconst K_UPDATE_DATE = '更新日';\nconst K_GENDER = \"姓\"\nconst K_NAME = \"名\"\nconst K_PHONE = \"お電話番号\"\nconst K_RESERVATION_DATE = \"予約時間\"\n\nconst O_TICKET_NUMBER = \"新型コロナ接種券　券番号\";\nconst O_NUMBER_PLACE = '接種回数．';\nconst O_TARGET_DAY_COMPLETED = \"接種日．\";\nconst O_MANUFACTURE = \"メーカー．\";\n\n\nlet listErrorOther = [];\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Data need change of SS CSV\n      data1: new Map(),\n      data1Error: new Map(),\n      // Data of Client CSV\n      data2: new Map(),\n      // All data of ss csv to export to csv\n      // dataKeeper: new Map(),\n      // Name of title in SS CSV had changed.\n      nameChanged: [],\n      // file name will be export to csv.\n      fileName: \"\",\n      errorfileName: \"\",\n      isLoading: false,\n      showResults: false,\n      errorFound: false,\n      isFinishMerge: false,\n      resultData: \"\",\n    };\n    this.input1Ref = React.createRef();\n    this.input2Ref = React.createRef();\n    this.handleInputFile = this.handleInputFile.bind(this);\n    this.handleMergeData = this.handleMergeData.bind(this);\n    this.exportErrorFile = this.exportErrorFile.bind(this);\n    this.handleDownLoadFileMerged = this.handleDownLoadFileMerged.bind(this);\n    this.resetState = this.resetState.bind(this);\n\n  }\n\n  // Check file type csv.\n  checkFileCSV(fileName) {\n    var validExtensions = ['csv'];\n    var fileNameExt = fileName.substr(fileName.lastIndexOf('.') + 1);\n    if (_.findIndex(validExtensions, function (o) { return o == fileNameExt }) === -1) {\n      return false;\n    }\n    return true;\n  }\n\n  // Check type of data: ss CSV or client CSV.\n  checkFileType(data) {\n    if (data && data.hasOwnProperty(K_ID)) {\n      return 1;\n    } else if (\n      data &&\n      data.hasOwnProperty(O_MANUFACTURE) &&\n      data.hasOwnProperty(O_TARGET_DAY_COMPLETED) &&\n      data.hasOwnProperty(O_NUMBER_PLACE) &&\n      data.hasOwnProperty(O_TICKET_NUMBER)\n    ) {\n      return 2;\n    }\n    return -1;\n  }\n\n  // Show Alert invalid data with message and remove file name in input field.\n  handleInvalidData(message, event) {\n    alert(message);\n    event && (event.target.value = \"\");\n  }\n\n  // Handle data get from input field.\n  handleInputFile(event) {\n    listErrorOther = [];\n    this.setState({ isLoading: true, errorFound: false, isAvailableDownLoad: false, resultData: \"\", isFinishMerge: false });\n    var fileName = event.target.value.split(\"\\\\\").pop();\n    if (!this.checkFileCSV(fileName)) {\n      this.handleInvalidData('Invalid file type', event)\n      return;\n    }\n\n    // Parse data CSV to json.\n    Papa.parse(event.target.files[0], {\n      delimiter: \",\",\n      header: true,\n      // encoding: \"Shift-JIS\",\n      skipEmptyLines: true,\n      trimHeaders: true,\n      complete: (results) => {\n        // callBack(results.data);\n        console.log(results.data)\n        // check null data\n        const firstData = _.first(results?.data) || undefined;\n        if (results.errors.length > 0 || !firstData) {\n          this.handleInvalidData('The CSV file is empty data, Please choose another file.', event);\n          this.setState({ isLoading: false })\n          return\n        }\n        // Check type of data ss CSV or client CSV.\n        if (this.checkFileType(firstData) == 1) {\n          this.setState({ fileName: fileName.substr(0, fileName.lastIndexOf('.')) })\n          this.handleDataFile1(results)\n        } else if (this.checkFileType(firstData) == 2) {\n          this.setState({ errorfileName: fileName.substr(0, fileName.lastIndexOf('.')) })\n          this.handleDataFile2(results)\n        } else {\n          // If none of two type above -> show error require special fields on CSV.\n          this.handleInvalidData(\n            \"Invalid data format csv must have「新型コロナ接種券　券番号」、「接種回数．」、「接種日．」、「メーカー．」fields. And, must used UTF-8 encoding.\",\n            event\n          );\n          this.setState({ isLoading: false })\n        }\n      },\n      transform: (value, field) => {\n        return this.validDataString(value);\n      },\n      transformHeader: (header, index) => {\n        header = this.validDataString(header)\n        if (header == K_PLACE) {\n          let nameChanged = this.state.nameChanged;\n          header = K_PLACE + index;\n          nameChanged.push(header);\n          this.setState({ nameChanged: nameChanged })\n        }\n        return header;\n      }\n    })\n  }\n\n  validDataString(data) {\n    data = data.replace(new RegExp(/[=\"]/g), '')\n    // while(data.includes('\\\"')) {\n    //   data = data.replace('\\\"', '')\n    // }\n    return data\n  }\n\n  // Handle data JSON SS CSV\n  handleDataFile1(results) {\n    let datas = new Map();\n    let data1Error = new Map();\n    // let datasKeeper = new Map();\n    // collect data had status 未対応 -> join with datas if not exist in datas.\n    let dataDraff = new Map()\n    for (let i = 0; i < results.data.length; i++) {\n      let data = results.data[i]\n      if (data[K_NUMBER_PLACE] === '1回目' || data[K_NUMBER_PLACE] === '2回目') {\n        let key = data[K_TICKET_NUMBER] + data[K_NUMBER_PLACE]\n        if (data[K_STATUS] === '対応済') {\n          // data used for check need merge.\n          datas.set(key, data)\n        } else if (data[K_STATUS] === '未対応') {\n          // data used for check need merge.\n          dataDraff.set(key, data)\n        } else if (data[K_STATUS] === '完了') {\n          data1Error.set(key, data)\n        }\n      }\n      // All data of csv to export to csv\n      // datasKeeper.set(data[K_ID], data)\n    }\n\n    dataDraff.forEach((data, key) => {\n      if (!datas.has(key)) {\n        datas.set(key, data);\n      }\n    });\n\n    this.setState({\n      data1: datas,\n      data1Error: data1Error,\n      // dataKeeper: datasKeeper,  \n      isLoading: false\n    })\n    console.log('Upload file 1 success');\n  }\n\n  // Handle data JSON Client CSV\n  handleDataFile2(results) {\n    console.log(results.data)\n    let datas = new Map();\n    for (let i = 0; i < results.data.length; i++) {\n\n      let data = results.data[i]\n      if ((data[O_NUMBER_PLACE] === '1' || data[O_NUMBER_PLACE] === '2') && !_.isEmpty(data[O_TICKET_NUMBER])) {\n        datas.set(data[O_TICKET_NUMBER] + data[O_NUMBER_PLACE] + '回目', data)\n      } else {\n        listErrorOther.push(data);\n      }\n    }\n    this.setState({ data2: datas, isLoading: false })\n\n    console.log('list data error before merge');\n    console.log(listErrorOther);\n    console.log('Upload file 2 success');\n    console.log(datas)\n  }\n\n  // Not used.\n  validateAddEnoughtFileData() {\n    if (this.input1Ref.value && this.input1Ref.value && (this.state.data1.size == 0 || this.state.data2.size == 0)) {\n      this.handleInvalidData(\"Can not merge two csv has same type. You must input SwichSmile CSV and another CSV to merge\")\n    }\n  }\n\n  // Handle merge data trigger from button merger.\n  handleMergeData(event) {\n    this.handleProcessData(() => {\n      this.mergeCsv();\n    })\n  }\n\n  // Show spinner and after change state will be handle somthing.\n  handleProcessData(completion) {\n    this.setState({ isLoading: true }, () => {\n      // settimeout to brownser have time to reload page.\n      setTimeout(function () { completion(); }, 1000);\n    });\n  }\n\n  getCategoryFieldName(datas, fieldsName) {\n    for (let [key, data] of datas) {\n      for (const field of fieldsName) {\n        if (data[field].includes('category')) {\n          return field;\n        }\n      }\n    }\n    for (let [key, data] of datas) {\n      for (const field of fieldsName) {\n        if (data[field] > 0) {\n          return field === fieldsName[0] ? fieldsName[1] : fieldsName[0];\n        }\n      }\n    }\n    return fieldsName[0];\n  }\n\n  // Handle merge csv data.\n  mergeCsv = async () => {\n    // this.forceUpdate();\n    // event.preventDefault();\n\n    let datas1 = this.state.data1;\n    let datas1Error = this.state.data1Error;\n    let datas2 = this.state.data2;\n    // let dataKeeper = this.state.dataKeeper;\n    let fieldsName = this.state.nameChanged;\n    let categoryFieldName = this.getCategoryFieldName(datas1, fieldsName)\n    let inoculationPlace = categoryFieldName === fieldsName[0] ? fieldsName[1] : fieldsName[0];\n    let csvContent = [];\n    // File SS data need merge from client data. and change them -> save into dataKeeper.\n    datas2.forEach((data, key) => {\n      if (datas1.has(key)) {\n        let changeData = datas1.get(key)\n        if ((changeData[K_STATUS] === '未対応')) {\n          if (_.isEmpty(changeData[K_GENDER])) changeData[K_GENDER] = \"・\"\n          if (_.isEmpty(changeData[K_NAME])) changeData[K_NAME] = \"・\"\n          if (_.isEmpty(changeData[K_PHONE])) changeData[K_PHONE] = \"0\"\n          if (_.isEmpty(changeData[categoryFieldName])) changeData[categoryFieldName] = 'category#024511_0|20210517|1'\n          if (_.isEmpty(changeData[inoculationPlace])) changeData[inoculationPlace] = '（システム管理用）完了'\n          if (_.isEmpty(changeData[K_RESERVATION_DATE])) changeData[K_RESERVATION_DATE] = '2021-05-17 08:00'\n        }\n        changeData[K_MANUFACTURE] = data[O_MANUFACTURE];\n        const stringDate = moment(new Date(data[O_TARGET_DAY_COMPLETED])).format(K_DATE_FORMAT);\n        changeData[K_TARGET_DAY_COMPLETED] = stringDate;\n        changeData[K_STATUS] = K_STATUS_COMPLETED;\n        changeData[K_UPDATE_DATE] = moment(new Date()).format(K_UPDATE_DATE_FORMAT);\n\n        // dataKeeper[changeData[K_ID]] = changeData;\n        csvContent.push(changeData)\n        // console.log('merge data ' + key)\n\n      } else if (datas1Error.has(key)) {\n        let checkData = datas1Error.get(key)\n        const stringDate = moment(new Date(data[O_TARGET_DAY_COMPLETED])).format(K_DATE_FORMAT);\n        if (checkData[K_TARGET_DAY_COMPLETED] != stringDate) {\n          listErrorOther.push(data);\n        }\n      } else {\n        listErrorOther.push(data);\n      }\n    })\n\n\n    console.log('data error after merge: ');\n    console.log(listErrorOther);\n    console.log('finish Merge: ');\n    console.log(csvContent);\n    // const json2csvParser = new Parser();\n    // const csv = json2csvParser.parse(dataKeeper);\n    // let csvContent = [];\n    // rename \n\n    // transter Map into array.\n    // dataKeeper.forEach(function (rowArray) {\n    //   csvContent.push(rowArray);\n    // });\n\n    // Parse object to CSV string.\n    console.log('begin parse: ');\n    var csv = Papa.unparse(csvContent, {})\n    console.log(csv);\n    // Change name 接種場所 had been change to original.\n    let nameChanged = this.state.nameChanged;\n    if (nameChanged.length > 0) {\n      let headerIndex = csv.indexOf('\\n');\n      if (headerIndex) {\n        var headerString = csv.substring(0, headerIndex);\n        let headers = headerString.split(',');\n        var newHeaders = [];\n        headers.forEach(function (header) {\n          if (header.includes(K_PLACE)) {\n            let index = _.findIndex(nameChanged, function (o) { return header.includes(o) });\n            if (index >= 0) {\n              header = _.replace(header, nameChanged[index], '接種場所')\n            }\n          }\n          newHeaders.push(header)\n        })\n      }\n      let newHeadersString = _.join(newHeaders, ',');\n      csv = csv.replace(headerString, newHeadersString);\n    }\n    // Show toast \n\n    // Save file with name is ss file name + merged + date time.\n\n    this.input1Ref.current.value = ''\n    this.input2Ref.current.value = ''\n\n    // reset state.\n    this.setState({\n      data1: new Map(),\n      data1Error: new Map(),\n      data2: new Map(),\n      // dataKeeper: new Map(),\n      nameChanged: [],\n      isLoading: false,\n      showResults: true,\n      isFinishMerge: true,\n      resultData: csv,\n      errorFound: listErrorOther.length > 0\n    })\n  }\n\n  resetState() {\n    // reset state.\n    this.setState({\n      data1: new Map(),\n      data1Error: new Map(),\n      data2: new Map(),\n      // dataKeeper: new Map(),\n      nameChanged: [],\n      fileName: \"\",\n      errorfileName: \"\",\n      isLoading: false,\n      showResults: false,\n      errorFound: false,\n      resultData: \"\",\n      isFinishMerge: false,\n    });\n    listErrorOther = [];\n  }\n\n\n  handleDownLoadFileMerged() {\n    const stringDate = moment(new Date()).format('MMDDYYYYhhmm');\n    var fileName = this.state.fileName + \"_merged_\" + stringDate + '.csv'\n\n    // handle download file\n    this.downloadToFile(this.state.resultData, fileName, 'text/csv;charset=utf-8;')\n  }\n\n  // handle download file\n  downloadToFile = (content, filename, contentType) => {\n    const a = document.createElement('a');\n    const file = new Blob([content], { type: contentType });\n\n    a.href = URL.createObjectURL(file);\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(a.href);\n  };\n\n  exportErrorFile() {\n    if (_.size(listErrorOther) > 0) {\n      this.setState({ isLoading: true }, () => {\n        setTimeout(() => {\n          const csv = Papa.unparse(listErrorOther);\n          const stringDate = moment(new Date()).format(\"MMDDYYYYhhmm\");\n          this.downloadToFile(csv, [this.state.errorfileName, 'error', stringDate + '.csv'].join('_'), \"text/csv;charset=utf-8;\");\n          this.setState({\n            isLoading: false,\n          });\n        }, 100);\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">CSVマージツール</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        </Navbar>\n        <div className=\"container\">\n          <Form className=\"form-container\">\n            <label className=\"form-input-title\">使用方法：<br />\n          ① 健康カルテのCSVファイルおよび予約システムのCSVファイルをPCからアップロードしてください。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;・どちらのCSVファイルも文字コードをUTF-8にする必要があります。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;・健康カルテのCSVファイルは「新型コロナ接種券 券番号」、「生年月日」、「接種回数．」、「接種日．」、「メーカー．」のデータを必須とします。<br />\n② 2つのCSVファイルをアップロードした後、「CSVマージ」ボタンを押下してください。<br />\n③ 「マージされた予約システムのデータをダウンロード」ボタンを押下して、マージされたCSVファイルをダウンロードしてください。<br />\n              <br />\nマージの際にエラーがあった場合、「マージされなかった健康カルテのデータをダウンロード」ボタンが表示されます。<br />\n「マージされなかった健康カルテのデータをダウンロード」ボタンを押下すると、健康カルテ上のマージされなかった内容がCSVファイルでダウンロードできます。<br /></label>\n            <div className=\"form-input-container\">\n\n              <Form.Group controlId=\"file1\">\n                <Form.File id=\"fileCSVFile1\" label=\"健康カルテのCSVを選択してください\" ref={this.input1Ref} onChange={this.handleInputFile} />\n              </Form.Group>\n              <Form.Group controlId=\"file2\">\n                <Form.File id=\"fileCSVFile2\" label=\"予約システムのCSVを選択してください\" ref={this.input2Ref} onChange={this.handleInputFile} />\n              </Form.Group>\n            </div>\n            {!this.state.isFinishMerge ?\n              <Button variant=\"primary\" type=\"button\" onClick={this.handleMergeData} disabled={this.state.isLoading}>\n                CSVマージ\n          </Button> :\n              <div>\n                <Button variant=\"primary\" type=\"button\" onClick={this.handleDownLoadFileMerged} disabled={this.state.isLoading}>\n                  マージされた予約システムのデータをダウンロード\n            </Button>\n                {this.state.errorFound && (\n                  <>\n                    <Button\n                      variant=\"danger\"\n                      type=\"button\"\n                      className=\"ml-4\"\n                      onClick={this.exportErrorFile}\n                      disabled={this.state.isLoading}\n                    >\n                      マージされなかった健康カルテのデータをダウンロード\n                </Button>\n                  </>\n                )}\n                {/* <Button variant=\"btn btn-warning\" type=\"button\" className=\"ml-4\" onClick={this.resetState} disabled={this.state.isLoading}>\n            リセット\n            </Button> */}\n              </div>\n            }\n          </Form>\n          {this.state.isLoading ?\n            <div className=\"loading-container\">\n              <Spinner className=\"loading-content\" animation=\"border\" variant=\"primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </Spinner>\n            </div> :\n            <div>\n            </div>\n          }\n\n          {/* show toast */}\n          <div\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            style={{\n              position: 'absolute',\n              minHeight: '200px',\n              top: 0,\n              right: 0,\n            }}\n          >\n            <Toast onClose={() => this.setState({ showResults: false })} show={false} delay={5000} autohide>\n              <Toast.Header>\n                <strong className=\"mr-auto\">Merge CSV complete.</strong>\n              </Toast.Header>\n              <Toast.Body>merge CSV file complete. The result CSV will be automatic download.</Toast.Body>\n            </Toast>\n          </div>\n          {/*end show toast */}\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}