{"version":3,"sources":["App.js","index.js"],"names":["K_PLACE","K_DATE_FORMAT","K_PHONE","O_TICKET_NUMBER","O_NUMBER_PLACE","O_TARGET_DAY_COMPLETED","O_MANUFACTURE","listErrorOther","App","props","mergeCsv","a","datas1","state","data1","datas1Error","data1Error","datas2","data2","csvContent","forEach","data","key","has","changeData","get","_","isEmpty","K_CATEGORY","K_RESERVATION_DATE","stringDate","moment","Date","format","K_TARGET_DAY_COMPLETED","K_STATUS","push","checkData","csv","Papa","unparse","input1Ref","current","value","input2Ref","setState","Map","isLoading","showResults","isFinishMerge","resultData","errorFound","length","downloadToFile","content","filename","contentType","document","createElement","file","Blob","type","href","URL","createObjectURL","download","click","revokeObjectURL","fileName","errorfileName","React","createRef","handleInputFile","bind","handleMergeData","exportErrorFile","handleDownLoadFileMerged","resetState","fileNameExt","substr","lastIndexOf","findIndex","o","hasOwnProperty","message","event","alert","target","this","isAvailableDownLoad","split","pop","checkFileCSV","parse","files","delimiter","header","skipEmptyLines","trimHeaders","complete","results","firstData","first","undefined","errors","handleInvalidData","checkFileType","handleDataFile1","handleDataFile2","transform","field","validDataString","transformHeader","index","replace","RegExp","datas","dataDraff","i","K_NUMBER_PLACE","set","delete","size","handleProcessData","completion","setTimeout","join","className","Navbar","bg","expand","Brand","Toggle","aria-controls","Form","Group","controlId","File","id","label","ref","onChange","Button","variant","onClick","disabled","Spinner","animation","role","aria-live","aria-atomic","style","position","minHeight","top","right","Toast","onClose","show","delay","autohide","Header","Body","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5520fada.chunk.js","sourcesContent":["import 'bootstrap/dist/css/bootstrap.min.css';\nimport { Form, Button, Navbar, Spinner, Toast } from 'react-bootstrap';\nimport React from 'react';\nimport './App.css';\nimport Papa from 'papaparse'\nimport _ from 'lodash'\nimport moment from 'moment'\n\nconst LIST_STATUS_MERGED = [\"対応済\"];\nconst K_STATUS = \"状態\";\nconst K_TICKET_NUMBER = \"接種券番号\";\nconst K_NUMBER_PLACE = \"接種回数\";\nconst K_STATUS_COMPLETED = \"完了\";\nconst K_TARGET_DAY_COMPLETED = \"接種実施日\";\nconst K_MANUFACTURE = \"接種ワクチンのメーカー\";\nconst K_PLACE = \"接種場所とワクチンの種類\";\nconst K_CATEGORY = \"接種場所\"\nconst K_ID = \"パーティションキー\";\nconst K_DATE_FORMAT = 'YYYY-MM-DD';\nconst K_UPDATE_DATE_FORMAT = 'YYYY-MM-DD hh:mm:ss';\nconst K_UPDATE_DATE = '更新日';\nconst K_GENDER = \"姓\"\nconst K_NAME = \"名\"\nconst K_PHONE = \"お電話番号\"\nconst K_RESERVATION_DATE = \"予約時間\"\n\nconst O_TICKET_NUMBER = \"新型コロナ接種券　券番号\";\nconst O_NUMBER_PLACE = '接種回数．';\nconst O_TARGET_DAY_COMPLETED = \"接種日．\";\nconst O_MANUFACTURE = \"メーカー．\";\n\n\nlet listErrorOther = [];\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Data need change of SS CSV\n      data1: new Map(),\n      data1Error: new Map(),\n      // Data of Client CSV\n      data2: new Map(),\n      // file name will be export to csv.\n      fileName: \"\",\n      errorfileName: \"\",\n      isLoading: false,\n      showResults: false,\n      errorFound: false,\n      isFinishMerge: false,\n      resultData: \"\",\n    };\n    this.input1Ref = React.createRef();\n    this.input2Ref = React.createRef();\n    this.handleInputFile = this.handleInputFile.bind(this);\n    this.handleMergeData = this.handleMergeData.bind(this);\n    this.exportErrorFile = this.exportErrorFile.bind(this);\n    this.handleDownLoadFileMerged = this.handleDownLoadFileMerged.bind(this);\n    this.resetState = this.resetState.bind(this);\n\n  }\n\n  // Check file type csv.\n  checkFileCSV(fileName) {\n    var validExtensions = ['csv'];\n    var fileNameExt = fileName.substr(fileName.lastIndexOf('.') + 1);\n    if (_.findIndex(validExtensions, function (o) { return o == fileNameExt }) === -1) {\n      return false;\n    }\n    return true;\n  }\n\n  // Check type of data: ss CSV or client CSV.\n  checkFileType(data) {\n    if (data && data.hasOwnProperty(K_ID)) {\n      return 1;\n    } else if (\n      data &&\n      data.hasOwnProperty(O_MANUFACTURE) &&\n      data.hasOwnProperty(O_TARGET_DAY_COMPLETED) &&\n      data.hasOwnProperty(O_NUMBER_PLACE) &&\n      data.hasOwnProperty(O_TICKET_NUMBER)\n    ) {\n      return 2;\n    }\n    return -1;\n  }\n\n  // Show Alert invalid data with message and remove file name in input field.\n  handleInvalidData(message, event) {\n    alert(message);\n    event && (event.target.value = \"\");\n  }\n\n  // Handle data get from input field.\n  handleInputFile(event) {\n    listErrorOther = [];\n    this.setState({ isLoading: true, errorFound: false, isAvailableDownLoad: false, resultData: \"\", isFinishMerge: false });\n    var fileName = event.target.value.split(\"\\\\\").pop();\n    if (!this.checkFileCSV(fileName)) {\n      this.handleInvalidData('Invalid file type', event)\n      return;\n    }\n\n    // Parse data CSV to json.\n    Papa.parse(event.target.files[0], {\n      delimiter: \",\",\n      header: true,\n      // encoding: \"Shift-JIS\",\n      skipEmptyLines: true,\n      trimHeaders: true,\n      complete: (results) => {\n        // check null data\n        const firstData = _.first(results?.data) || undefined;\n        if (results.errors.length > 0 || !firstData) {\n          this.handleInvalidData('The CSV file is empty data, Please choose another file.', event);\n          this.setState({ isLoading: false })\n          return\n        }\n        // Check type of data ss CSV or client CSV.\n        if (this.checkFileType(firstData) == 1) {\n          this.setState({ fileName: fileName.substr(0, fileName.lastIndexOf('.')) })\n          this.handleDataFile1(results)\n        } else if (this.checkFileType(firstData) == 2) {\n          this.setState({ errorfileName: fileName.substr(0, fileName.lastIndexOf('.')) })\n          this.handleDataFile2(results)\n        } else {\n          // If none of two type above -> show error require special fields on CSV.\n          this.handleInvalidData(\n            \"Invalid data format csv must have「新型コロナ接種券　券番号」、「接種回数．」、「接種日．」、「メーカー．」fields. And, must used UTF-8 encoding.\",\n            event\n          );\n          this.setState({ isLoading: false })\n        }\n      },\n      transform: (value, field) => {\n        return this.validDataString(value);\n      },\n      transformHeader: (header, index) => {\n        header = this.validDataString(header)\n        return header;\n      }\n    })\n  }\n\n  validDataString(data) {\n    data = data.replace(new RegExp(/[=\"]/g), '')\n    return data\n  }\n\n  // Handle data JSON SS CSV\n  handleDataFile1(results) {\n    let datas = new Map();\n    let data1Error = new Map();\n    // let datasKeeper = new Map();\n    // collect data had status 未対応 -> join with datas if not exist in datas.\n    let dataDraff = new Map()\n    for (let i = 0; i < results.data.length; i++) {\n      let data = results.data[i]\n      if (data[K_NUMBER_PLACE] === '1回目' || data[K_NUMBER_PLACE] === '2回目') {\n        let key = data[K_TICKET_NUMBER] + data[K_NUMBER_PLACE]\n        if (data[K_STATUS] === '対応済' || data[K_STATUS] === 'キャンセル') {\n          // data used for check need merge.\n          datas.set(key, data)\n\n        } else if (data[K_STATUS] === '未対応') {\n          dataDraff.set(key, data)\n        } else if (data[K_STATUS] === '完了') {\n          data1Error.set(key, data)\n        }\n      }\n    }\n\n    dataDraff.forEach((data, key) => {\n      if (!datas.has(key)) {\n        datas.set(key, data);\n      }\n    });\n\n    data1Error.forEach((data, key) => {\n      if (datas.has(key)) {\n        datas.delete(key, data);\n      }\n    });\n\n    this.setState({\n      data1: datas,\n      data1Error: data1Error,\n      isLoading: false\n    })\n  }\n\n  // Handle data JSON Client CSV\n  handleDataFile2(results) {\n    let datas = new Map();\n    for (let i = 0; i < results.data.length; i++) {\n\n      let data = results.data[i]\n      if ((data[O_NUMBER_PLACE] === '1' || data[O_NUMBER_PLACE] === '2') && !_.isEmpty(data[O_TICKET_NUMBER])) {\n        datas.set(data[O_TICKET_NUMBER] + data[O_NUMBER_PLACE] + '回目', data)\n      } else {\n        listErrorOther.push(data);\n      }\n    }\n    this.setState({ data2: datas, isLoading: false })\n  }\n\n  // Not used.\n  validateAddEnoughtFileData() {\n    if (this.input1Ref.value && this.input1Ref.value && (this.state.data1.size == 0 || this.state.data2.size == 0)) {\n      this.handleInvalidData(\"Can not merge two csv has same type. You must input SwichSmile CSV and another CSV to merge\")\n    }\n  }\n\n  // Handle merge data trigger from button merger.\n  handleMergeData(event) {\n    this.handleProcessData(() => {\n      this.mergeCsv();\n    })\n  }\n\n  // Show spinner and after change state will be handle somthing.\n  handleProcessData(completion) {\n    this.setState({ isLoading: true }, () => {\n      // settimeout to brownser have time to reload page.\n      setTimeout(function () { completion(); }, 1000);\n    });\n  }\n\n  // Handle merge csv data.\n  mergeCsv = async () => {\n    let datas1 = this.state.data1;\n    let datas1Error = this.state.data1Error;\n    let datas2 = this.state.data2;\n    let csvContent = [];\n    // File SS data need merge from client data. and change them -> save into dataKeeper.\n    datas2.forEach((data, key) => {\n      if (datas1.has(key)) {\n        let changeData = datas1.get(key)\n        if (_.isEmpty(changeData[K_GENDER])) changeData[K_GENDER] = \"・\"\n        if (_.isEmpty(changeData[K_NAME])) changeData[K_NAME] = \"・\"\n        if (_.isEmpty(changeData[K_PHONE])) changeData[K_PHONE] = \"0\"\n        if (_.isEmpty(changeData[K_CATEGORY])) changeData[K_CATEGORY] = 'category#024511_0|20210517|1'\n        if (_.isEmpty(changeData[K_PLACE])) changeData[K_PLACE] = '（システム管理用）完了'\n        if (_.isEmpty(changeData[K_RESERVATION_DATE])) changeData[K_RESERVATION_DATE] = '2021-05-17 08:00'\n        changeData[K_MANUFACTURE] = data[O_MANUFACTURE];\n        const stringDate = moment(new Date(data[O_TARGET_DAY_COMPLETED])).format(K_DATE_FORMAT);\n        changeData[K_TARGET_DAY_COMPLETED] = stringDate;\n        changeData[K_STATUS] = K_STATUS_COMPLETED;\n        // changeData[K_UPDATE_DATE] = moment(new Date()).format(K_UPDATE_DATE_FORMAT);\n\n        csvContent.push(changeData)\n\n      } else if (datas1Error.has(key)) {\n        let checkData = datas1Error.get(key)\n        const stringDate = moment(new Date(data[O_TARGET_DAY_COMPLETED])).format(K_DATE_FORMAT);\n        if (checkData[K_TARGET_DAY_COMPLETED] != stringDate) {\n          listErrorOther.push(data);\n        }\n      } else {\n        listErrorOther.push(data);\n      }\n    })\n\n\n    // Parse object to CSV string.\n    var csv = Papa.unparse(csvContent, {})\n\n    this.input1Ref.current.value = ''\n    this.input2Ref.current.value = ''\n\n    // reset state.\n    this.setState({\n      data1: new Map(),\n      data1Error: new Map(),\n      data2: new Map(),\n      // dataKeeper: new Map(),\n      // nameChanged: [],\n      isLoading: false,\n      showResults: true,\n      isFinishMerge: true,\n      resultData: csv,\n      errorFound: listErrorOther.length > 0\n    })\n  }\n\n  resetState() {\n    // reset state.\n    this.setState({\n      data1: new Map(),\n      data1Error: new Map(),\n      data2: new Map(),\n      // dataKeeper: new Map(),\n      // nameChanged: [],\n      fileName: \"\",\n      errorfileName: \"\",\n      isLoading: false,\n      showResults: false,\n      errorFound: false,\n      resultData: \"\",\n      isFinishMerge: false,\n    });\n    listErrorOther = [];\n  }\n\n\n  handleDownLoadFileMerged() {\n    // Save file with name is ss file name + merged + date time.\n    const stringDate = moment(new Date()).format('MMDDYYYYhhmm');\n    var fileName = this.state.fileName + \"_merged_\" + stringDate + '.csv'\n\n    // handle download file\n    this.downloadToFile(this.state.resultData, fileName, 'text/csv;charset=utf-8;')\n  }\n\n  // handle download file\n  downloadToFile = (content, filename, contentType) => {\n    const a = document.createElement('a');\n    const file = new Blob([content], { type: contentType });\n\n    a.href = URL.createObjectURL(file);\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(a.href);\n  };\n\n  exportErrorFile() {\n    if (_.size(listErrorOther) > 0) {\n      this.setState({ isLoading: true }, () => {\n        setTimeout(() => {\n          const csv = Papa.unparse(listErrorOther);\n          const stringDate = moment(new Date()).format(\"MMDDYYYYhhmm\");\n          this.downloadToFile(csv, [this.state.errorfileName, 'error', stringDate + '.csv'].join('_'), \"text/csv;charset=utf-8;\");\n          this.setState({\n            isLoading: false,\n          });\n        }, 100);\n      });\n    }\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">CSVマージツール</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n        </Navbar>\n        <div className=\"container\">\n          <Form className=\"form-container\">\n            <label className=\"form-input-title\">使用方法：<br />\n          ① 健康カルテのCSVファイルおよび予約システムのCSVファイルをPCからアップロードしてください。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;・どちらのCSVファイルも文字コードをUTF-8にする必要があります。<br />\n&nbsp;&nbsp;&nbsp;&nbsp;・健康カルテのCSVファイルは「新型コロナ接種券 券番号」、「生年月日」、「接種回数．」、「接種日．」、「メーカー．」のデータを必須とします。<br />\n② 2つのCSVファイルをアップロードした後、「CSVマージ」ボタンを押下してください。<br />\n③ 「マージされた予約システムのデータをダウンロード」ボタンを押下して、マージされたCSVファイルをダウンロードしてください。<br />\n              <br />\nマージの際にエラーがあった場合、「マージされなかった健康カルテのデータをダウンロード」ボタンが表示されます。<br />\n「マージされなかった健康カルテのデータをダウンロード」ボタンを押下すると、健康カルテ上のマージされなかった内容がCSVファイルでダウンロードできます。<br /></label>\n            <div className=\"form-input-container\">\n\n              <Form.Group controlId=\"file1\">\n                <Form.File id=\"fileCSVFile1\" label=\"健康カルテのCSVを選択してください\" ref={this.input1Ref} onChange={this.handleInputFile} />\n              </Form.Group>\n              <Form.Group controlId=\"file2\">\n                <Form.File id=\"fileCSVFile2\" label=\"予約システムのCSVを選択してください\" ref={this.input2Ref} onChange={this.handleInputFile} />\n              </Form.Group>\n            </div>\n            {!this.state.isFinishMerge ?\n              <Button variant=\"primary\" type=\"button\" onClick={this.handleMergeData} disabled={this.state.isLoading}>\n                CSVマージ\n          </Button> :\n              <div>\n                <Button variant=\"primary\" type=\"button\" onClick={this.handleDownLoadFileMerged} disabled={this.state.isLoading}>\n                  マージされた予約システムのデータをダウンロード\n            </Button>\n                {this.state.errorFound && (\n                  <>\n                    <Button\n                      variant=\"danger\"\n                      type=\"button\"\n                      className=\"ml-4\"\n                      onClick={this.exportErrorFile}\n                      disabled={this.state.isLoading}\n                    >\n                      マージされなかった健康カルテのデータをダウンロード\n                </Button>\n                  </>\n                )}\n                {/* <Button variant=\"btn btn-warning\" type=\"button\" className=\"ml-4\" onClick={this.resetState} disabled={this.state.isLoading}>\n            リセット\n            </Button> */}\n              </div>\n            }\n          </Form>\n          {this.state.isLoading ?\n            <div className=\"loading-container\">\n              <Spinner className=\"loading-content\" animation=\"border\" variant=\"primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n              </Spinner>\n            </div> :\n            <div>\n            </div>\n          }\n\n          {/* show toast */}\n          <div\n            aria-live=\"polite\"\n            aria-atomic=\"true\"\n            style={{\n              position: 'absolute',\n              minHeight: '200px',\n              top: 0,\n              right: 0,\n            }}\n          >\n            <Toast onClose={() => this.setState({ showResults: false })} show={false} delay={5000} autohide>\n              <Toast.Header>\n                <strong className=\"mr-auto\">Merge CSV complete.</strong>\n              </Toast.Header>\n              <Toast.Body>merge CSV file complete. The result CSV will be automatic download.</Toast.Body>\n            </Toast>\n          </div>\n          {/*end show toast */}\n        </div>\n      </div>\n    );\n  }\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}